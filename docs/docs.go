// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Get the health status of the API including uptime and version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Check if the API is alive and responding",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LivenessResponse"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Check if the API is ready to serve requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReadinessResponse"
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "description": "Get a list of all blog posts with metadata only (no content)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all blog posts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PostsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{slug}": {
            "get": {
                "description": "Get a specific blog post by its slug identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get a blog post by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BlogPost"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rss": {
            "get": {
                "description": "Get an RSS feed of all blog posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/rss+xml"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get RSS feed",
                "responses": {
                    "200": {
                        "description": "RSS XML feed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string",
                    "example": "blog-api"
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "uptime": {
                    "type": "string",
                    "example": "1h23m45s"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "handlers.LivenessResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "alive"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "handlers.ReadinessResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ready"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "models.BlogPost": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "This is the full content of the blog post..."
                },
                "date": {
                    "type": "string",
                    "example": "2024-01-01"
                },
                "excerpt": {
                    "type": "string",
                    "example": "This is a short excerpt..."
                },
                "publish_date": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "slug": {
                    "type": "string",
                    "example": "hello-world"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "go",
                        "api",
                        "blog"
                    ]
                },
                "title": {
                    "type": "string",
                    "example": "Hello World"
                }
            }
        },
        "models.BlogPostMeta": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2024-01-01"
                },
                "excerpt": {
                    "type": "string",
                    "example": "This is a short excerpt..."
                },
                "publish_date": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "slug": {
                    "type": "string",
                    "example": "hello-world"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "go",
                        "api",
                        "blog"
                    ]
                },
                "title": {
                    "type": "string",
                    "example": "Hello World"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Something went wrong"
                }
            }
        },
        "models.PostsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 5
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BlogPostMeta"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Blog API",
	Description:      "A simple blog API built with Go and Gin",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
